(ns atomist.commands
  (:require [cljs.spec.alpha :as s]))

(defmulti run (comp :command/command :command))

(s/def :push/branch string?)
(s/def :push/sha string?)
(s/def :label/number integer?)
(s/def :label/default-color string?)
(s/def :repo/owner string?)
(s/def :repo/name string?)
(s/def :command/args string?)
(s/def :command/repo (s/keys :req-un [:repo/owner :repo/name]))
(s/def :command/token string?)
(s/def :command/message string?)
(s/def :command/base (s/keys :req [:command/command :command/args :command/token :command/repo :command/message :command/login]))
(s/def :command/login string?)

(s/def :command/command #{"pr" "label" "cc" "wish"})
(defmulti command-type :command/command)
(defmethod command-type "pr" [_] (s/merge :command/base (s/keys :req [:push/branch])))
(defmethod command-type "label" [_] (s/merge :command/base (s/keys :req [:label/number :label/default-color])))
(defmethod command-type "cc" [_] (s/merge :command/base (s/keys :opt [:label/number :push/branch :push/sha])))
(defmethod command-type "wish" [_] :command/base)
(s/def :command/spec (s/multi-spec command-type :command/command))
